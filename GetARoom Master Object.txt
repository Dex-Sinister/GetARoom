@@ Note that DB_PARENT needs to be set to the DBref of the GetARoom Parent, and the Master Object needs to be placed in the Master Room, or somewhere else its attributes will be checked for commands.
&DB_PARENT GetARoom Master Object=#2183

@create GetARoom Master Object=10
&DATA`ALEAVE GetARoom Master Object=@@ Check if anyone is inside.;@break strlen(lcon(%!,connect));@@ Check the list of things needing destruction.;@dol [iter(lexits(%!),findexits(%i0,%!))] %!={@remit where(##)=u(ansi) [name(##)] vanishes. The room is no longer got.;@destroy/instant ##}
&ACCESS GetARoom Master Object=isstaff(%#)
&ANSI GetARoom Master Object=ansi(g,switch(%0,,<GetARoom>,%0))
&CMD`GETAROOM GetARoom Master Object=$+getaroom *:@break strmatch(%0,*=*);@switch/first 0=valid(roomname,%0),{@pemit %#=u(ansi) '%0' is not a valid room name.},[@@(Does the exit name/alias not overlap with existing exits in the room? Sets alias into %q1.)]lor(iter(%0;[setr(1,iter(filter(fil`word,%0),mid(%i0,0,1),,@@))],not(match(iter(lexits(%l),fullname(%i0),,;),%i0,;)),;)),{@pemit %#=Both '%0' and '%q1' are in use as exit names or aliases. Please provide another exit name ([u(ansi,+getaroom %0=<exit>)]).},{@pemit %#=u(ansi) You get [setr(z,the temporary room '%0'\, with exit alias '%q1'.)];@oemit %#=u(ansi) %k gets %qz;@@ Create objects. Room is %qr, inward exit is %qa, outward exit is %qb.;think [setq(r,create(%0,10,r))][setq(a,create([u(ansi,filter(fil`word,%0))];%q1,10,e))][setq(b,create(Out <O>;o;out,10,e))]
[set(%qr,data`owner:%#)][set(%qr,exit:%qa)];@parent %qr=v(db_parent);@link %qa=%qr;@tel %qa=%l;@link %qb=%l;@tel %qb=%qr;@aleave %qr=[v(data`aleave)];@set %qr=!no_command;@desc %qa=This temporary exit leads to \[name\(loc\(\%!\)\)\].}
&CMD`GETAROOM/LIST GetARoom Master Object=$+getaroom/list:@pemit %#=u(ansi) [switch(0,words(setr(0,sortby(#305/namesort,children(v(db_parent))))),No rooms have currently been got.,Players have got these rooms:%r[iter(%q0,name(%i0) [u(ansi,off)] [name(loc(exit(%i0)))]([loc(exit(%i0))]) [u(ansi,by)] [moniker(get(%i0/data`owner))],,%r)])]
&CMD`GETAROOM/LOAD GetARoom Master Object=$+getaroom/load *:@switch/first 0=match(parent(%l),v(db_parent)),{@pemit %#=u(ansi) You are not in a gotten room.},or(controls(%#,%l),match(get(%l/data`owner),%#)),{@pemit %#=u(ansi) You don't have authority to change the desc here.},[@@(Autocomplete desc. Sets desc name into %q0.)]complete(iter(lattr(%#/desc`*),capstr(lcstr(rest(%i0,`)))),%0,saved desc,0),{@pemit %#=u(ansi) %qe},{@pemit %#=u(ansi) You change the gotten room's desc, replacing it with your saved desc "%q0".;@desc %l=[get(%#/desc`%q0)]}
&CMD`GETAROOM/EXIT GetARoom Master Object=$+getaroom *=*:@switch/first 0=match(IC RP,get(%l/status)),{@pemit %#=u(ansi) You cannot get a room from an OOC location.},valid(roomname,%0),{@pemit %#=u(ansi) '%0' is not a valid room name.},valid(exitname,%1),{@pemit %#=u(ansi) '%1' is not a valid exit name.},[@@(Does the exit name/alias not overlap with existing exits in the room?)]lor(iter(%1,not(match(iter(lexits(%l),fullname(%i0),,;),%i0,;)),;)),{@pemit %#='%1' is in use as an exit name or alias. Please try another exit name.},{@pemit %#=u(ansi) You get [setr(z,the temporary room '%0'\, with exit '%1'.)];@oemit %#=u(ansi) %k gets %qz;@@ Create objects. Room is %qr, inward exit is %qa, outward exit is %qb.;think [setq(r,create(%0,10,r))][setq(a,create([u(ansi,filter(fil`word,%0))];%1,10,e))][setq(b,create(Out <O>;o;out,10,e))][set(%qr,data`owner:%#)][set(%qr,exit:%qa)];@parent %qr=v(db_parent);@link %qa=%qr;@tel %qa=%l;@link %qb=%l;@tel %qb=%qr;@aleave %qr=[v(data`aleave)];@set %qr=!no_command;@desc %qa=This temporary exit leads to \[name\(loc\(\%!\)\)\].}
&FIL`WORD GetARoom Master Object=or(isword(left(%0,1)),isnum(left(%0,1)))
@set GetARoom Master Object=INHERIT